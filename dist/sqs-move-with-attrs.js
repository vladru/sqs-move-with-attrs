"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SqsMoveWithAttrs {
    constructor(sqsClient, fromSqsUrl, toSqsUrl) {
        this.castMessageAttributes = (source) => {
            for (const key in source) {
                // noinspection JSUnfilteredForInLoop
                delete source[key].StringListValues;
                // noinspection JSUnfilteredForInLoop
                delete source[key].BinaryListValues;
            }
            return source;
        };
        this.sqsClient = sqsClient;
        this.fromSqsUrl = fromSqsUrl;
        this.toSqsUrl = toSqsUrl;
        this.receiveOptions = {
            MessageAttributeNames: [
                "All"
            ],
            QueueUrl: fromSqsUrl,
            MaxNumberOfMessages: 10,
            VisibilityTimeout: 30,
            WaitTimeSeconds: 0
        };
        this.processedMessagesCount = 0;
        this.receiveMessageRequestCount = 0;
    }
    reportProgress(numMessages) {
        this.processedMessagesCount += numMessages;
        process.stdout.write("\rMessages moved:" + this.processedMessagesCount);
    }
    /**
     * @return promise resolved with number of moved messages
     */
    async moveJob() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise(async (resolve, reject) => {
            const sendRequest = {
                QueueUrl: this.toSqsUrl,
                Entries: []
            };
            const deleteRequest = {
                QueueUrl: this.fromSqsUrl,
                Entries: []
            };
            let movedMessagesCount = 0;
            try {
                do {
                    // for Debugging
                    // if (++this.receiveMessageRequestCount > 100) {
                    //     resolve(movedMessagesCount);
                    //     return
                    // }
                    const response = await this.sqsClient.receiveMessage(this.receiveOptions).promise();
                    if (!response.Messages) {
                        resolve(movedMessagesCount);
                        return;
                    }
                    let id = 0;
                    sendRequest.Entries = [];
                    deleteRequest.Entries = [];
                    for (const message of response.Messages) {
                        if (message.Body && message.ReceiptHandle) {
                            id++;
                            const sendEntry = {
                                Id: '' + id,
                                MessageBody: message.Body
                            };
                            if (message.MessageAttributes) {
                                sendEntry.MessageAttributes = this.castMessageAttributes(message.MessageAttributes);
                            }
                            sendRequest.Entries.push(sendEntry);
                            deleteRequest.Entries.push({
                                Id: '' + id,
                                ReceiptHandle: message.ReceiptHandle
                            });
                        }
                    }
                    await this.sqsClient.sendMessageBatch(sendRequest).promise();
                    await this.sqsClient.deleteMessageBatch(deleteRequest).promise();
                    movedMessagesCount += response.Messages.length;
                    this.reportProgress(response.Messages.length);
                    // eslint-disable-next-line no-constant-condition
                } while (true);
            }
            catch (err) {
                reject(err);
            }
        });
    }
    /**
     * Do moving messages from source to destination queue
     * @param jobConcurrency
     * @return promise resolved with number of moved messages
     */
    async move(jobConcurrency = 50) {
        const moveJobs = [];
        for (let i = 0; i < jobConcurrency; i++) {
            moveJobs.push(this.moveJob());
        }
        const result = await Promise.all(moveJobs);
        return result.reduce((prevValue, currentValue) => { return prevValue + currentValue; }, 0);
    }
}
exports.SqsMoveWithAttrs = SqsMoveWithAttrs;
//# sourceMappingURL=data:application/json;base64,