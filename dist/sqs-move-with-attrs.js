"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SqsMoveWithAttrs {
    constructor(sqsClient, fromSqsUrl, toSqsUrl) {
        this.castMessageAttributes = (source) => {
            for (const key in source) {
                // noinspection JSUnfilteredForInLoop
                delete source[key].StringListValues;
                // noinspection JSUnfilteredForInLoop
                delete source[key].BinaryListValues;
            }
            return source;
        };
        this.sqsClient = sqsClient;
        this.fromSqsUrl = fromSqsUrl;
        this.toSqsUrl = toSqsUrl;
        this.receiveOptions = {
            MessageAttributeNames: [
                "All"
            ],
            QueueUrl: fromSqsUrl,
            MaxNumberOfMessages: 10,
            VisibilityTimeout: 30,
            WaitTimeSeconds: 0
        };
        this.processedMessagesCount = 0;
        this.jobLaunchingCount = 0;
    }
    reportProgress(numMessages) {
        this.processedMessagesCount += numMessages;
        process.stdout.write("\rMessages moved:" + this.processedMessagesCount);
    }
    async moveJob(jobNum) {
        // for Debugging
        // if (++this.jobLaunchingCount > 100) {
        //     return
        // }
        let response = await this.sqsClient.receiveMessage(this.receiveOptions).promise();
        if (!response.Messages) {
            return;
        }
        let sendRequest = {
            QueueUrl: this.toSqsUrl,
            Entries: []
        };
        let deleteRequest = {
            QueueUrl: this.fromSqsUrl,
            Entries: []
        };
        let id = 0;
        for (const message of response.Messages) {
            if (message.Body && message.ReceiptHandle) {
                id++;
                const sendEntry = {
                    Id: '' + id,
                    MessageBody: message.Body
                };
                if (message.MessageAttributes) {
                    sendEntry.MessageAttributes = this.castMessageAttributes(message.MessageAttributes);
                }
                sendRequest.Entries.push(sendEntry);
                deleteRequest.Entries.push({
                    Id: '' + id,
                    ReceiptHandle: message.ReceiptHandle
                });
            }
        }
        await this.sqsClient.sendMessageBatch(sendRequest).promise();
        await this.sqsClient.deleteMessageBatch(deleteRequest).promise();
        this.reportProgress(response.Messages.length);
        // release memory before recursive call
        sendRequest = null;
        deleteRequest = null;
        response = null;
        return this.moveJob(jobNum);
    }
    async move(jobConcurrency = 50) {
        const moveJobs = [];
        for (let i = 0; i < jobConcurrency; i++) {
            moveJobs.push(this.moveJob(i + 1));
        }
        return Promise.all(moveJobs);
    }
}
exports.SqsMoveWithAttrs = SqsMoveWithAttrs;
//# sourceMappingURL=data:application/json;base64,