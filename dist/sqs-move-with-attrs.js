"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessageBatch.html
const MAX_SEND_MESSAGE_PAYLOAD_SIZE_BYTES = 256 * 1024;
class SqsMoveWithAttrs {
    constructor(sqsClient, fromSqsUrl, toSqsUrl) {
        this.castMessageAttributes = (source) => {
            for (const key in source) {
                // noinspection JSUnfilteredForInLoop
                delete source[key].StringListValues;
                // noinspection JSUnfilteredForInLoop
                delete source[key].BinaryListValues;
            }
            return source;
        };
        this.createSendMessageBatchRequest = () => {
            return {
                QueueUrl: this.toSqsUrl,
                Entries: []
            };
        };
        this.getSendEntrySizeInBytes = (entry) => {
            const str = JSON.stringify(entry);
            return Buffer.byteLength(str, "utf-8");
        };
        this.sqsClient = sqsClient;
        this.fromSqsUrl = fromSqsUrl;
        this.toSqsUrl = toSqsUrl;
        this.receiveOptions = {
            MessageAttributeNames: [
                "All"
            ],
            QueueUrl: fromSqsUrl,
            MaxNumberOfMessages: 10,
            VisibilityTimeout: 30,
            WaitTimeSeconds: 0
        };
        this.processedMessagesCount = 0;
        this.receiveMessageRequestCount = 0;
    }
    reportProgress(numMessages) {
        this.processedMessagesCount += numMessages;
        process.stdout.write("\rMessages moved:" + this.processedMessagesCount);
    }
    /**
     * @return promise resolved with number of moved messages
     */
    async moveJob() {
        // eslint-disable-next-line no-async-promise-executor
        return new Promise(async (resolve, reject) => {
            const deleteRequest = {
                QueueUrl: this.fromSqsUrl,
                Entries: []
            };
            let movedMessagesCount = 0;
            try {
                do {
                    // for Debugging
                    // if (++this.receiveMessageRequestCount > 100) {
                    //     resolve(movedMessagesCount);
                    //     return
                    // }
                    const response = await this.sqsClient.receiveMessage(this.receiveOptions).promise();
                    if (!response.Messages) {
                        resolve(movedMessagesCount);
                        return;
                    }
                    let id = 0;
                    const sendRequests = [];
                    let sendRequest = this.createSendMessageBatchRequest();
                    let sendRequestPayloadSize = 0;
                    deleteRequest.Entries = [];
                    for (const message of response.Messages) {
                        if (message.Body && message.ReceiptHandle) {
                            id++;
                            const sendEntry = {
                                Id: '' + id,
                                MessageBody: message.Body
                            };
                            if (message.MessageAttributes) {
                                sendEntry.MessageAttributes = this.castMessageAttributes(message.MessageAttributes);
                            }
                            const sendEntrySize = this.getSendEntrySizeInBytes(sendEntry);
                            if (sendRequestPayloadSize + sendEntrySize > MAX_SEND_MESSAGE_PAYLOAD_SIZE_BYTES) {
                                sendRequests.push(sendRequest);
                                sendRequest = this.createSendMessageBatchRequest();
                                sendRequestPayloadSize = 0;
                            }
                            sendRequestPayloadSize += sendEntrySize;
                            sendRequest.Entries.push(sendEntry);
                            deleteRequest.Entries.push({
                                Id: '' + id,
                                ReceiptHandle: message.ReceiptHandle
                            });
                        }
                    }
                    sendRequests.push(sendRequest);
                    for (const request of sendRequests) {
                        await this.sqsClient.sendMessageBatch(request).promise();
                    }
                    await this.sqsClient.deleteMessageBatch(deleteRequest).promise();
                    movedMessagesCount += response.Messages.length;
                    this.reportProgress(response.Messages.length);
                    // eslint-disable-next-line no-constant-condition
                } while (true);
            }
            catch (err) {
                reject(err);
            }
        });
    }
    /**
     * Do moving messages from source to destination queue
     * @param jobConcurrency
     * @return promise resolved with number of moved messages
     */
    async move(jobConcurrency = 50) {
        const moveJobs = [];
        for (let i = 0; i < jobConcurrency; i++) {
            moveJobs.push(this.moveJob());
        }
        const result = await Promise.all(moveJobs);
        return result.reduce((prevValue, currentValue) => { return prevValue + currentValue; }, 0);
    }
}
exports.SqsMoveWithAttrs = SqsMoveWithAttrs;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3FzLW1vdmUtd2l0aC1hdHRycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zcXMtbW92ZS13aXRoLWF0dHJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsa0dBQWtHO0FBQ2xHLE1BQU0sbUNBQW1DLEdBQUUsR0FBRyxHQUFDLElBQUksQ0FBQztBQUVwRCxNQUFhLGdCQUFnQjtJQVV6QixZQUFZLFNBQWMsRUFBRSxVQUFrQixFQUFFLFFBQWdCO1FBd0J4RCwwQkFBcUIsR0FBRyxDQUFDLE1BQW1DLEVBQStCLEVBQUU7WUFDakcsS0FBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7Z0JBQ3ZCLHFDQUFxQztnQkFDckMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3BDLHFDQUFxQztnQkFDckMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7YUFDdkM7WUFDRCxPQUFPLE1BQU0sQ0FBQztRQUNsQixDQUFDLENBQUM7UUFFTSxrQ0FBNkIsR0FBRyxHQUFnQyxFQUFFO1lBQ3hFLE9BQU87Z0JBQ0gsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2dCQUN2QixPQUFPLEVBQUUsRUFBRTthQUNkLENBQUE7UUFDSCxDQUFDLENBQUM7UUFFTSw0QkFBdUIsR0FBRyxDQUFDLEtBQXVDLEVBQVUsRUFBRTtZQUNsRixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xDLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDMUMsQ0FBQyxDQUFDO1FBM0NFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBRXpCLElBQUksQ0FBQyxjQUFjLEdB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Q0o7QUFySkQsNENBcUpDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTUVN9IGZyb20gXCJhd3Mtc2RrXCI7XHJcblxyXG4vLyBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTU2ltcGxlUXVldWVTZXJ2aWNlL2xhdGVzdC9BUElSZWZlcmVuY2UvQVBJX1NlbmRNZXNzYWdlQmF0Y2guaHRtbFxyXG5jb25zdCBNQVhfU0VORF9NRVNTQUdFX1BBWUxPQURfU0laRV9CWVRFUyA9MjU2KjEwMjQ7XHJcblxyXG5leHBvcnQgY2xhc3MgU3FzTW92ZVdpdGhBdHRycyB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzcXNDbGllbnQ6IFNRUztcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZnJvbVNxc1VybDogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSB0b1Nxc1VybDogc3RyaW5nO1xyXG5cclxuICAgIHByaXZhdGUgcHJvY2Vzc2VkTWVzc2FnZXNDb3VudDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSByZWNlaXZlT3B0aW9uczogU1FTLlJlY2VpdmVNZXNzYWdlUmVxdWVzdDtcclxuICAgIHByaXZhdGUgcmVjZWl2ZU1lc3NhZ2VSZXF1ZXN0Q291bnQ6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzcXNDbGllbnQ6IFNRUywgZnJvbVNxc1VybDogc3RyaW5nLCB0b1Nxc1VybDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zcXNDbGllbnQgPSBzcXNDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5mcm9tU3FzVXJsID0gZnJvbVNxc1VybDtcclxuICAgICAgICB0aGlzLnRvU3FzVXJsID0gdG9TcXNVcmw7XHJcblxyXG4gICAgICAgIHRoaXMucmVjZWl2ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIE1lc3NhZ2VBdHRyaWJ1dGVOYW1lczogW1xyXG4gICAgICAgICAgICAgICAgXCJBbGxcIlxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBRdWV1ZVVybDogZnJvbVNxc1VybCxcclxuICAgICAgICAgICAgTWF4TnVtYmVyT2ZNZXNzYWdlczogMTAsXHJcbiAgICAgICAgICAgIFZpc2liaWxpdHlUaW1lb3V0OiAzMCxcclxuICAgICAgICAgICAgV2FpdFRpbWVTZWNvbmRzOiAwXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy5wcm9jZXNzZWRNZXNzYWdlc0NvdW50ID0gMDtcclxuICAgICAgICB0aGlzLnJlY2VpdmVNZXNzYWdlUmVxdWVzdENvdW50ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlcG9ydFByb2dyZXNzKG51bU1lc3NhZ2VzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NlZE1lc3NhZ2VzQ291bnQgKz0gbnVtTWVzc2FnZXM7XHJcbiAgICAgICAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoXCJcXHJNZXNzYWdlcyBtb3ZlZDpcIit0aGlzLnByb2Nlc3NlZE1lc3NhZ2VzQ291bnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2FzdE1lc3NhZ2VBdHRyaWJ1dGVzID0gKHNvdXJjZTogU1FTLk1lc3NhZ2VCb2R5QXR0cmlidXRlTWFwKTogU1FTLk1lc3NhZ2VCb2R5QXR0cmlidXRlTWFwID0+IHtcclxuICAgICAgICBmb3IgKCBjb25zdCBrZXkgaW4gc291cmNlKSB7XHJcbiAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU1VuZmlsdGVyZWRGb3JJbkxvb3BcclxuICAgICAgICAgICAgZGVsZXRlIHNvdXJjZVtrZXldLlN0cmluZ0xpc3RWYWx1ZXM7XHJcbiAgICAgICAgICAgIC8vIG5vaW5zcGVjdGlvbiBKU1VuZmlsdGVyZWRGb3JJbkxvb3BcclxuICAgICAgICAgICAgZGVsZXRlIHNvdXJjZVtrZXldLkJpbmFyeUxpc3RWYWx1ZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9O1xyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlU2VuZE1lc3NhZ2VCYXRjaFJlcXVlc3QgPSAoKTogU1FTLlNlbmRNZXNzYWdlQmF0Y2hSZXF1ZXN0ID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIFF1ZXVlVXJsOiB0aGlzLnRvU3FzVXJsLFxyXG4gICAgICAgICAgRW50cmllczogW11cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBwcml2YXRlIGdldFNlbmRFbnRyeVNpemVJbkJ5dGVzID0gKGVudHJ5OiBTUVMuU2VuZE1lc3NhZ2VCYXRjaFJlcXVlc3RFbnRyeSk6IG51bWJlciA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RyID0gSlNPTi5zdHJpbmdpZnkoZW50cnkpO1xyXG4gICAgICAgIHJldHVybiBCdWZmZXIuYnl0ZUxlbmd0aChzdHIsIFwidXRmLThcIilcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIHByb21pc2UgcmVzb2x2ZWQgd2l0aCBudW1iZXIgb2YgbW92ZWQgbWVzc2FnZXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBhc3luYyBtb3ZlSm9iKCk6IFByb21pc2U8bnVtYmVyPiB7XHJcblxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1hc3luYy1wcm9taXNlLWV4ZWN1dG9yXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKCBhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZWxldGVSZXF1ZXN0OiBTUVMuRGVsZXRlTWVzc2FnZUJhdGNoUmVxdWVzdCA9IHtcclxuICAgICAgICAgICAgICAgIFF1ZXVlVXJsOiB0aGlzLmZyb21TcXNVcmwsXHJcbiAgICAgICAgICAgICAgICBFbnRyaWVzOiBbXVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IG1vdmVkTWVzc2FnZXNDb3VudCA9IDA7XHJcblxyXG4gICAgICAgICAgICB0cnkge1xyXG5cclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgRGVidWdnaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKCsrdGhpcy5yZWNlaXZlTWVzc2FnZVJlcXVlc3RDb3VudCA+IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICByZXNvbHZlKG1vdmVkTWVzc2FnZXNDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2U6IFNRUy5SZWNlaXZlTWVzc2FnZVJlc3VsdCA9IGF3YWl0IHRoaXMuc3FzQ2xpZW50LnJlY2VpdmVNZXNzYWdlKHRoaXMucmVjZWl2ZU9wdGlvbnMpLnByb21pc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLk1lc3NhZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobW92ZWRNZXNzYWdlc0NvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRSZXF1ZXN0czogU1FTLlNlbmRNZXNzYWdlQmF0Y2hSZXF1ZXN0W10gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc2VuZFJlcXVlc3QgPSB0aGlzLmNyZWF0ZVNlbmRNZXNzYWdlQmF0Y2hSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlbmRSZXF1ZXN0UGF5bG9hZFNpemUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlcXVlc3QuRW50cmllcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiByZXNwb25zZS5NZXNzYWdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5Cb2R5ICYmIG1lc3NhZ2UuUmVjZWlwdEhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbmRFbnRyeTogU1FTLlNlbmRNZXNzYWdlQmF0Y2hSZXF1ZXN0RW50cnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWQ6ICcnK2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VCb2R5OiBtZXNzYWdlLkJvZHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5NZXNzYWdlQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRFbnRyeS5NZXNzYWdlQXR0cmlidXRlcyA9IHRoaXMuY2FzdE1lc3NhZ2VBdHRyaWJ1dGVzKG1lc3NhZ2UuTWVzc2FnZUF0dHJpYnV0ZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZW5kRW50cnlTaXplID0gdGhpcy5nZXRTZW5kRW50cnlTaXplSW5CeXRlcyhzZW5kRW50cnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbmRSZXF1ZXN0UGF5bG9hZFNpemUgKyBzZW5kRW50cnlTaXplID4gTUFYX1NFTkRfTUVTU0FHRV9QQVlMT0FEX1NJWkVfQllURVMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdHMucHVzaChzZW5kUmVxdWVzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlcXVlc3QgPSB0aGlzLmNyZWF0ZVNlbmRNZXNzYWdlQmF0Y2hSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlcXVlc3RQYXlsb2FkU2l6ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdFBheWxvYWRTaXplICs9IHNlbmRFbnRyeVNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdC5FbnRyaWVzLnB1c2goc2VuZEVudHJ5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZVJlcXVlc3QuRW50cmllcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZDogJycraWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVjZWlwdEhhbmRsZTogbWVzc2FnZS5SZWNlaXB0SGFuZGxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdHMucHVzaChzZW5kUmVxdWVzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByZXF1ZXN0IG9mIHNlbmRSZXF1ZXN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNxc0NsaWVudC5zZW5kTWVzc2FnZUJhdGNoKHJlcXVlc3QpLnByb21pc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zcXNDbGllbnQuZGVsZXRlTWVzc2FnZUJhdGNoKGRlbGV0ZVJlcXVlc3QpLnByb21pc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBtb3ZlZE1lc3NhZ2VzQ291bnQgKz0gcmVzcG9uc2UuTWVzc2FnZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydFByb2dyZXNzKHJlc3BvbnNlLk1lc3NhZ2VzLmxlbmd0aCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cclxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERvIG1vdmluZyBtZXNzYWdlcyBmcm9tIHNvdXJjZSB0byBkZXN0aW5hdGlvbiBxdWV1ZVxyXG4gICAgICogQHBhcmFtIGpvYkNvbmN1cnJlbmN5XHJcbiAgICAgKiBAcmV0dXJuIHByb21pc2UgcmVzb2x2ZWQgd2l0aCBudW1iZXIgb2YgbW92ZWQgbWVzc2FnZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIG1vdmUoam9iQ29uY3VycmVuY3k9IDUwKTogUHJvbWlzZTxudW1iZXI+IHtcclxuICAgICAgICBjb25zdCBtb3ZlSm9iczogUHJvbWlzZTxudW1iZXI+W10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpPTA7IGkgPCBqb2JDb25jdXJyZW5jeTsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1vdmVKb2JzLnB1c2godGhpcy5tb3ZlSm9iKCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLmFsbChtb3ZlSm9icyk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5yZWR1Y2UoIChwcmV2VmFsdWUsIGN1cnJlbnRWYWx1ZSkgPT4geyByZXR1cm4gcHJldlZhbHVlICsgY3VycmVudFZhbHVlfSwgMClcclxuICAgIH1cclxufVxyXG4iXX0=