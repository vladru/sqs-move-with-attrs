#!/usr/bin/env node
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const sqs_move_with_attrs_1 = require("./sqs-move-with-attrs");
console.log("Move all messages with its attributes from one AWS SQS queue to another.");
const matchSqsUrl = (sqsUrl) => {
    const sqsUrlRegex = /^https:\/\/sqs\.[\w-]+\.amazonaws\.com\/[\d]+\/.+$/;
    return sqsUrlRegex.test(sqsUrl);
};
let errorMessage = null;
if (process.argv.length != 4) {
    errorMessage = "Unexpected number of arguments.";
}
else if (!matchSqsUrl(process.argv[2])) {
    errorMessage = "Invalid format of <source_SQS_URL>.";
}
else if (!matchSqsUrl(process.argv[3])) {
    errorMessage = "Invalid format of <destination_SQS_URL>.";
}
if (errorMessage) {
    console.log("ERROR: %s", errorMessage);
    console.log("Use:\n\tyarn move <source_SQS_URL> <destination_SQS_url>");
    console.log("Expected SQS URL format: 'https://sqs.<region>.amazonaws.com/<account_id>/<queue_name>'");
    process.exit(-1);
}
const fromSqsUrl = process.argv[2];
const toSqsUrl = process.argv[3];
(async () => {
    try {
        const sqsClient = new aws_sdk_1.SQS();
        const sqsMove = new sqs_move_with_attrs_1.SqsMoveWithAttrs(sqsClient, fromSqsUrl, toSqsUrl);
        const startTime = new Date().getTime();
        await sqsMove.move();
        const endTime = new Date().getTime();
        console.log("\nProcessing time: %d sec.", Math.round((endTime - startTime) / 1000));
    }
    catch (e) {
        if (e.message === "Missing region in config") {
            console.error(e.message);
            console.log("Define AWS_REGION environment variable to specify region used by AWS SDK.");
        }
        else {
            console.error(e);
        }
        process.exitCode = -1;
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFDOztBQUViLHFDQUE0QjtBQUM1QiwrREFBdUQ7QUFFdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBRXhGLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBYyxFQUFXLEVBQUU7SUFDNUMsTUFBTSxXQUFXLEdBQUcsb0RBQW9ELENBQUM7SUFDekUsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ25DLENBQUMsQ0FBQztBQUVGLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztBQUN4QixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtJQUMxQixZQUFZLEdBQUcsaUNBQWlDLENBQUM7Q0FDcEQ7S0FBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUN0QyxZQUFZLEdBQUcscUNBQXFDLENBQUM7Q0FDeEQ7S0FBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUN0QyxZQUFZLEdBQUcsMENBQTBDLENBQUM7Q0FDN0Q7QUFFRCxJQUFJLFlBQVksRUFBRTtJQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMERBQTBELENBQUMsQ0FBQztJQUN4RSxPQUFPLENBQUMsR0FBRyxDQUFDLHlGQUF5RixDQUFDLENBQUM7SUFDdkcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ25CO0FBRUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWpDLENBQUMsS0FBSyxJQUFtQixFQUFFO0lBQ3ZCLElBQUk7UUFDQSxNQUFNLFNBQVMsR0FBRyxJQUFJLGFBQUcsRUFBRSxDQUFDO1FBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUksc0NBQWdCLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN0RSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxHQUFDLFNBQVMsQ0FBQyxHQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7S0FDbEY7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNSLElBQUksQ0FBQyxDQUFDLE9BQU8sS0FBSywwQkFBMEIsRUFBRTtZQUMxQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLDJFQUEyRSxDQUFDLENBQUE7U0FDM0Y7YUFBTTtZQUNILE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEI7UUFDRCxPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3pCO0FBQ0wsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuaW1wb3J0IHtTUVN9IGZyb20gXCJhd3Mtc2RrXCI7XHJcbmltcG9ydCB7U3FzTW92ZVdpdGhBdHRyc30gZnJvbSBcIi4vc3FzLW1vdmUtd2l0aC1hdHRyc1wiO1xyXG5cclxuY29uc29sZS5sb2coXCJNb3ZlIGFsbCBtZXNzYWdlcyB3aXRoIGl0cyBhdHRyaWJ1dGVzIGZyb20gb25lIEFXUyBTUVMgcXVldWUgdG8gYW5vdGhlci5cIik7XHJcblxyXG5jb25zdCBtYXRjaFNxc1VybCA9IChzcXNVcmw6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG4gICAgY29uc3Qgc3FzVXJsUmVnZXggPSAvXmh0dHBzOlxcL1xcL3Nxc1xcLltcXHctXStcXC5hbWF6b25hd3NcXC5jb21cXC9bXFxkXStcXC8uKyQvO1xyXG4gICAgcmV0dXJuIHNxc1VybFJlZ2V4LnRlc3Qoc3FzVXJsKVxyXG59O1xyXG5cclxubGV0IGVycm9yTWVzc2FnZSA9IG51bGw7XHJcbmlmIChwcm9jZXNzLmFyZ3YubGVuZ3RoICE9IDQpIHtcclxuICAgIGVycm9yTWVzc2FnZSA9IFwiVW5leHBlY3RlZCBudW1iZXIgb2YgYXJndW1lbnRzLlwiO1xyXG59IGVsc2UgaWYgKCFtYXRjaFNxc1VybChwcm9jZXNzLmFyZ3ZbMl0pKSB7XHJcbiAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgZm9ybWF0IG9mIDxzb3VyY2VfU1FTX1VSTD4uXCI7XHJcbn0gZWxzZSBpZiAoIW1hdGNoU3FzVXJsKHByb2Nlc3MuYXJndlszXSkpIHtcclxuICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBmb3JtYXQgb2YgPGRlc3RpbmF0aW9uX1NRU19VUkw+LlwiO1xyXG59XHJcblxyXG5pZiAoZXJyb3JNZXNzYWdlKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkVSUk9SOiAlc1wiLGVycm9yTWVzc2FnZSk7XHJcbiAgICBjb25zb2xlLmxvZyhcIlVzZTpcXG5cXHR5YXJuIG1vdmUgPHNvdXJjZV9TUVNfVVJMPiA8ZGVzdGluYXRpb25fU1FTX3VybD5cIik7XHJcbiAgICBjb25zb2xlLmxvZyhcIkV4cGVjdGVkIFNRUyBVUkwgZm9ybWF0OiAnaHR0cHM6Ly9zcXMuPHJlZ2lvbj4uYW1hem9uYXdzLmNvbS88YWNjb3VudF9pZD4vPHF1ZXVlX25hbWU+J1wiKTtcclxuICAgIHByb2Nlc3MuZXhpdCgtMSlcclxufVxyXG5cclxuY29uc3QgZnJvbVNxc1VybCA9IHByb2Nlc3MuYXJndlsyXTtcclxuY29uc3QgdG9TcXNVcmwgPSBwcm9jZXNzLmFyZ3ZbM107XHJcblxyXG4oYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBzcXNDbGllbnQgPSBuZXcgU1FTKCk7XHJcbiAgICAgICAgY29uc3Qgc3FzTW92ZSA9IG5ldyBTcXNNb3ZlV2l0aEF0dHJzKHNxc0NsaWVudCwgZnJvbVNxc1VybCwgdG9TcXNVcmwpO1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGF3YWl0IHNxc01vdmUubW92ZSgpO1xyXG4gICAgICAgIGNvbnN0IGVuZFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlxcblByb2Nlc3NpbmcgdGltZTogJWQgc2VjLlwiLCBNYXRoLnJvdW5kKChlbmRUaW1lLXN0YXJ0VGltZSkvMTAwMCkpXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGUubWVzc2FnZSA9PT0gXCJNaXNzaW5nIHJlZ2lvbiBpbiBjb25maWdcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGVmaW5lIEFXU19SRUdJT04gZW52aXJvbm1lbnQgdmFyaWFibGUgdG8gc3BlY2lmeSByZWdpb24gdXNlZCBieSBBV1MgU0RLLlwiKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSAtMTtcclxuICAgIH1cclxufSkoKTtcclxuIl19