#!/usr/bin/env node
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const sqs_move_with_attrs_1 = require("./sqs-move-with-attrs");
console.log("Move all messages with its attributes from one AWS SQS queue to another.");
const matchSqsUrl = (sqsUrl) => {
    const sqsUrlRegex = /^https:\/\/sqs\.[\w-]+\.amazonaws\.com\/[\d]+\/.+$/;
    return sqsUrlRegex.test(sqsUrl);
};
let errorMessage = null;
if (process.argv.length != 4) {
    errorMessage = "Unexpected number of arguments.";
}
else if (!matchSqsUrl(process.argv[2])) {
    errorMessage = "Invalid format of <source_SQS_URL>.";
}
else if (!matchSqsUrl(process.argv[3])) {
    errorMessage = "Invalid format of <destination_SQS_URL>.";
}
if (errorMessage) {
    console.log("ERROR: %s", errorMessage);
    console.log("Use:\n\tyarn move <source_SQS_URL> <destination_SQS_url>");
    console.log("Expected SQS URL format: 'https://sqs.<region>.amazonaws.com/<account_id>/<queue_name>'");
    process.exit(-1);
}
const fromSqsUrl = process.argv[2];
const toSqsUrl = process.argv[3];
(async () => {
    try {
        const sqsClient = new aws_sdk_1.SQS();
        const sqsMove = new sqs_move_with_attrs_1.SqsMoveWithAttrs(sqsClient, fromSqsUrl, toSqsUrl);
        const startTime = new Date().getTime();
        const movedMessagesCount = await sqsMove.move();
        const endTime = new Date().getTime();
        console.log("%d messages have been moved within %d sec.", movedMessagesCount, Math.round((endTime - startTime) / 1000));
    }
    catch (e) {
        if (e.message === "Missing region in config") {
            console.error(e.message);
            console.log("Define AWS_REGION environment variable to specify region used by AWS SDK.");
        }
        else {
            console.error(e);
        }
        process.exitCode = -1;
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NsaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsWUFBWSxDQUFDOztBQUViLHFDQUE0QjtBQUM1QiwrREFBdUQ7QUFFdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQywwRUFBMEUsQ0FBQyxDQUFDO0FBRXhGLE1BQU0sV0FBVyxHQUFHLENBQUMsTUFBYyxFQUFXLEVBQUU7SUFDNUMsTUFBTSxXQUFXLEdBQUcsb0RBQW9ELENBQUM7SUFDekUsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ25DLENBQUMsQ0FBQztBQUVGLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztBQUN4QixJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtJQUMxQixZQUFZLEdBQUcsaUNBQWlDLENBQUM7Q0FDcEQ7S0FBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUN0QyxZQUFZLEdBQUcscUNBQXFDLENBQUM7Q0FDeEQ7S0FBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUN0QyxZQUFZLEdBQUcsMENBQTBDLENBQUM7Q0FDN0Q7QUFFRCxJQUFJLFlBQVksRUFBRTtJQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMERBQTBELENBQUMsQ0FBQztJQUN4RSxPQUFPLENBQUMsR0FBRyxDQUFDLHlGQUF5RixDQUFDLENBQUM7SUFDdkcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0NBQ25CO0FBRUQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWpDLENBQUMsS0FBSyxJQUFtQixFQUFFO0lBQ3ZCLElBQUk7UUFDQSxNQUFNLFNBQVMsR0FBRyxJQUFJLGFBQUcsRUFBRSxDQUFDO1FBQzVCLE1BQU0sT0FBTyxHQUFHLElBQUksc0NBQWdCLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN0RSxNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDaEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUMsU0FBUyxDQUFDLEdBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtLQUN0SDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1IsSUFBSSxDQUFDLENBQUMsT0FBTyxLQUFLLDBCQUEwQixFQUFFO1lBQzFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkVBQTJFLENBQUMsQ0FBQTtTQUMzRjthQUFNO1lBQ0gsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQjtRQUNELE9BQU8sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDekI7QUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxyXG4ndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQge1NRU30gZnJvbSBcImF3cy1zZGtcIjtcclxuaW1wb3J0IHtTcXNNb3ZlV2l0aEF0dHJzfSBmcm9tIFwiLi9zcXMtbW92ZS13aXRoLWF0dHJzXCI7XHJcblxyXG5jb25zb2xlLmxvZyhcIk1vdmUgYWxsIG1lc3NhZ2VzIHdpdGggaXRzIGF0dHJpYnV0ZXMgZnJvbSBvbmUgQVdTIFNRUyBxdWV1ZSB0byBhbm90aGVyLlwiKTtcclxuXHJcbmNvbnN0IG1hdGNoU3FzVXJsID0gKHNxc1VybDogc3RyaW5nKTogYm9vbGVhbiA9PiB7XHJcbiAgICBjb25zdCBzcXNVcmxSZWdleCA9IC9eaHR0cHM6XFwvXFwvc3FzXFwuW1xcdy1dK1xcLmFtYXpvbmF3c1xcLmNvbVxcL1tcXGRdK1xcLy4rJC87XHJcbiAgICByZXR1cm4gc3FzVXJsUmVnZXgudGVzdChzcXNVcmwpXHJcbn07XHJcblxyXG5sZXQgZXJyb3JNZXNzYWdlID0gbnVsbDtcclxuaWYgKHByb2Nlc3MuYXJndi5sZW5ndGggIT0gNCkge1xyXG4gICAgZXJyb3JNZXNzYWdlID0gXCJVbmV4cGVjdGVkIG51bWJlciBvZiBhcmd1bWVudHMuXCI7XHJcbn0gZWxzZSBpZiAoIW1hdGNoU3FzVXJsKHByb2Nlc3MuYXJndlsyXSkpIHtcclxuICAgIGVycm9yTWVzc2FnZSA9IFwiSW52YWxpZCBmb3JtYXQgb2YgPHNvdXJjZV9TUVNfVVJMPi5cIjtcclxufSBlbHNlIGlmICghbWF0Y2hTcXNVcmwocHJvY2Vzcy5hcmd2WzNdKSkge1xyXG4gICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIGZvcm1hdCBvZiA8ZGVzdGluYXRpb25fU1FTX1VSTD4uXCI7XHJcbn1cclxuXHJcbmlmIChlcnJvck1lc3NhZ2UpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiRVJST1I6ICVzXCIsZXJyb3JNZXNzYWdlKTtcclxuICAgIGNvbnNvbGUubG9nKFwiVXNlOlxcblxcdHlhcm4gbW92ZSA8c291cmNlX1NRU19VUkw+IDxkZXN0aW5hdGlvbl9TUVNfdXJsPlwiKTtcclxuICAgIGNvbnNvbGUubG9nKFwiRXhwZWN0ZWQgU1FTIFVSTCBmb3JtYXQ6ICdodHRwczovL3Nxcy48cmVnaW9uPi5hbWF6b25hd3MuY29tLzxhY2NvdW50X2lkPi88cXVldWVfbmFtZT4nXCIpO1xyXG4gICAgcHJvY2Vzcy5leGl0KC0xKVxyXG59XHJcblxyXG5jb25zdCBmcm9tU3FzVXJsID0gcHJvY2Vzcy5hcmd2WzJdO1xyXG5jb25zdCB0b1Nxc1VybCA9IHByb2Nlc3MuYXJndlszXTtcclxuXHJcbihhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHNxc0NsaWVudCA9IG5ldyBTUVMoKTtcclxuICAgICAgICBjb25zdCBzcXNNb3ZlID0gbmV3IFNxc01vdmVXaXRoQXR0cnMoc3FzQ2xpZW50LCBmcm9tU3FzVXJsLCB0b1Nxc1VybCk7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgY29uc3QgbW92ZWRNZXNzYWdlc0NvdW50ID0gYXdhaXQgc3FzTW92ZS5tb3ZlKCk7XHJcbiAgICAgICAgY29uc3QgZW5kVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiJWQgbWVzc2FnZXMgaGF2ZSBiZWVuIG1vdmVkIHdpdGhpbiAlZCBzZWMuXCIsIG1vdmVkTWVzc2FnZXNDb3VudCwgTWF0aC5yb3VuZCgoZW5kVGltZS1zdGFydFRpbWUpLzEwMDApKVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChlLm1lc3NhZ2UgPT09IFwiTWlzc2luZyByZWdpb24gaW4gY29uZmlnXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRlZmluZSBBV1NfUkVHSU9OIGVudmlyb25tZW50IHZhcmlhYmxlIHRvIHNwZWNpZnkgcmVnaW9uIHVzZWQgYnkgQVdTIFNESy5cIilcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwcm9jZXNzLmV4aXRDb2RlID0gLTE7XHJcbiAgICB9XHJcbn0pKCk7XHJcbiJdfQ==